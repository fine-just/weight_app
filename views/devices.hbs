


<!--
    <p>Scales</p>
<ul class='tasks'>
    {{#each id }}
    
    <li class='task' id={{id}}>weight: {{weight}}, lognitude: {{lognitude}}, latitude: {{latitude}}, time: {{time}}, date: {{date}}</li>
    {{/each}}
</ul>

 <head profile="http://gmpg.org/xfn/11">
      <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
 -->
 <head>    <!--  <link rel="stylesheet" type="text/css" href="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css" />
      
      
     <script type='text/javascript' src='http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js'></script> -->


  
      <link rel="stylesheet" href="/css/device.css" />
      <link rel="stylesheet" href="/css/navigations_bar.css" />
     <!--  
      <script src="https://cdn.jsdelivr.net/npm/chart.js/dist/chart.min.js"></script>
   
-->
    <!-- 
     <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.7.0/chart.js"></script>
     <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-date-fns/dist/chartjs-adapter-date-fns.bundle.min.js"></script>
-->
<!--
 <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.13.0/moment.min.js"></script> 
      <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.1.0/Chart.bundle.min.js"></script> 
      <script type="text/javascript"></script> 
 <script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/series-label.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/export-data.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>-->
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/modules/data.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
  <script src="https://cdn.socket.io/4.4.1/socket.io.min.js"></script>
 </head>


<div class="parent"> 

<!--
<div id="map" class="div_map" >
    <canvas id="myChart1" ></canvas>
</div>
     
     
 <canvas id="myChart" class="div_map" ></canvas>  -->
 <div id="outer">
   <div class="graph">
     <div style="display: flex;"> <h4 class='title' style="display:none;"id='{{device}}'>{{device}}</h4><button class="dot" onclick="more_options()"id="dbutton"><img  src="https://image.flaticon.com/icons/png/512/57/57085.png" class="down_btn"></div></button>
     <div class="other_device">
       <ul class="list_devices">
        
       </ul>
     </div>

      <hr style="background-color: antiquewhite;">
       <figure class="highcharts-figure">
        <div id="container"></div>
        <p class="highcharts-description">
   </div>

   
<div class="devices">
   
<h2 id='scale' style="color: aliceblue;">History</h2>
<p style="display:none">{{lim}}</p>

<div style="color: aliceblue;">Υπάρχουν <div id='metriseis' style="color: aliceblue;">{{id.0.row1}}</div> Μετρήσεις</div> 
<table class='tasks' id="list">

    <tr>
     
      <td>Weight</td>
      <td>Lognitude</td>
      <td>Latitude</td>
      <td>Date-time</td>
      <td>
       
      
        <label for="limit">choose data:</label>
        <select id="limit" name="{{lim}}" onchange="change_ref();">
        <!--   <input type="text" id="device_id" name="device_id"  style="display:none;" value={{device}} readonly>  -->
        <option value={{lim}} >{{lim}}</option> 
         
          
        </select>
      <button  value="Get Data"  ><a id='limit1' style="color: #2b2b2b; text-decoration: none;" href='/device/{{device}}/limit/{{lim}}'>more data</a></button>
     
      </td>
    <!--  <td>Date</td>-->
    </tr>
    {{#each id }}
   
    <tr>
      <!--<a href="/device/{{id}}"target="_self" class="a1" > -->
     
      
     <!-- <div class="weight_button" id='button{{id}}' onclick="OpenPopUp({{id}})">&nbsp;-->
        <td> <p class='weight' > {{weight}}</p> </td>
         <td><p class="lognitude" >{{long}}</p></td>
         <td><p class="latitude" >{{lang}} </p></td>
        <td> <p class="date-time"> {{date_time}}</p></td>
    <!--     <td> <p class="date" >{{date}}&nbsp;</p></td>-->
       
       <!--  </div> -->
    </tr>
 
   <!-- <li class='task' id={{id}}>weight: {{weight}}, lognitude: {{lognitude}}, latitude: {{latitude}}, time: {{time}}, date: {{date}}</li> -->
    {{/each}}
</table>

</div>

</div>
</div>
<script>
  const socket = io();
async function name_devices () {
   fetch('/name_devices')
      .then( async (response) => {

        // get json response here
        let data = await response.json();
        
        
        if(response.status === 200){
         // Process data here
        }else{
         // Rest of status codes (400,500,303), can be handled here appropriately
        }
        console.log(data)
        var title=document.getElementsByClassName('title')[0].innerText
        for(j=0;j<data.length;j++){
          if(data[j].device_id==title){
              document.getElementsByClassName('title')[0].innerText=data[j].device_name
              document.getElementsByClassName('title')[0].id=data[j].device_id
              document.getElementsByClassName('title')[0].style.display='block'
          }
        }
        var ul=document.getElementsByClassName('list_devices')[0]
        for(i=0;i<data.length;i++){
          var li=document.createElement('li')
          var a=document.createElement('a')
          if(data[i].device_id!=title){
            a.href=`/device/${data[i].device_id}`
            a.innerText=data[i].device_name
            a.id='list_a'
            li.appendChild(a)
            ul.appendChild(li)
          }

        }

      })
      .catch((err) => {
          console.log(err);
      })
     
}
name_devices()

  function more_options(){
    console.log('ww')
    var div_dev=document.getElementsByClassName("other_device")
    if(div_dev[0].style.display!='none'){
      div_dev[0].style.display='none'
    }
    else{
      div_dev[0].style.display='block'
    }
  }
  var down_btn=document.getElementById('dbutton')
  //down_btn.onclick=more_options


  


  function padTo2Digits(num) {
  return num.toString().padStart(2, '0');
}

function formatDate(date) {
  return (
    [
      date.getFullYear(),
      padTo2Digits(date.getMonth() + 1),
      padTo2Digits(date.getDate()),
    ].join('-') +
    ' ' +
    [
      padTo2Digits(date.getHours()),
      padTo2Digits(date.getMinutes()),
      padTo2Digits(date.getSeconds()),
    ].join(':')
  );
}
  function change_ref(){
    var opt=document.getElementById('limit')
    var new_lim=opt.options[opt.selectedIndex].value
    var a =document.getElementById('limit1')
    //var href=a.href.substring(0,37)
    var href =a.href.substring(0,51)
    href=href+String(new_lim)
    a.href=href
    console.log(a.href)
  }
  var metriseis=document.getElementById('metriseis');
  var row1=parseInt(metriseis.innerText)
  var select = document.getElementById('limit');
  var current_lim=parseInt(select.name)
  if(row1>20){
    // <select id="limit" name="limit">
    //<option value="20">20</option>
    var opt_data=[]
    var option
    var i
    for(i=10;i<=row1;i=i+10){
      if(i!=current_lim){
      option=document.createElement('option');
      option.value=i
      option.innerHTML=i
     
      select.appendChild(option)}
    }
    
  }
  

  var wei=document.getElementsByClassName("weight");
  var date=document.getElementsByClassName("date-time");
  
  var string1
  var weights=[]
  var dates=[]
  var times=[]
  var xValues=[]
  var yValues=[]
  var data1=[]
  for(var i=0;i<date.length;i++){
    var a=date[i].innerText;
     var a=a.slice(0,-5)
    //var da=new Date(a.substring(0,a.length-1));
    
    var da=new Date(a);

    console.log(da.toLocaleDateString())
    date[i].innerText=da.toLocaleString()

    dates.push(da.toLocaleString())
   
    weights.push(wei[i].innerText)
    yValues.push(parseFloat(wei[i].innerText))
    
    //string1.slice(0, string1.indexOf(',')) + string1.slice(string1.indexOf(',') + 1, str.length))
    //xValues.push( string1.slice(0, string1.indexOf(',')) + string1.slice(string1.indexOf(',') + 1, string1.length))
    xValues.push(da)
    data1.push([/*formatDate(da)*/da.valueOf(),parseFloat(wei[i].innerText)])
  }
  
 
    
//var xValues = [50,52,70,80,90,102,103,120,130,140,150];
//var yValues = [7,8,8,9,9,9,10,11,14,14,15];

//var xValues=[new Date('2020-09-30T21:00:00.000Z').toLocaleString(),new Date('2020-09-30T23:00:00.000Z').toLocaleString()]
//var yValues=[52.3,22.2]

data={
  xValues,
  yValues
}

var a1=[]

for(i=0;i<data1.length;i++){
    a1.push(data1[0])
 }
function newDate(days) {
  return moment().add(days, 'd');
}
/*
var config = {
  type: 'scatter',
  data: {
    labels:xValues, //[newDate(-4), newDate(-3), newDate(2), newDate(3), newDate(4), newDate(5), newDate(6)],
      datasets: [{
      fill: false,
      lineTension: 0,
      backgroundColor: "rgba(0,0,255,1.0)",
      borderColor: "rgba(0,0,255,0.1)",
      data: yValues
    }]
  },
  options: {
    scales: {
      xAxes: [{
        type: 'time',
        time: {
          displayFormats: {
             'millisecond': 'MMM DD',
            'second': 'MMM DD',
            'minute': 'MMM DD',
            'hour': 'MMM DD',
            'day': 'MMM DD',
            'week': 'MMM DD',
            'month': 'MMM DD',
            'quarter': 'MMM DD',
            'year': 'MMM DD',
          }
        }
      }],
    },
  }
};*/
//var config=
//var ctx = document.getElementById("myChart").getContext("2d");
//new Chart(ctx, config);

    
//*
Highcharts.setOptions({
    time: {
        timezoneOffset: -2*60
    }
});
var chart=new Highcharts.chart('container', {
  chart: {
    type: 'spline'
  },
  title: {
    text: 'Weights of device'
  },
  
  subtitle: {
    text: 'Irregular time data in Highcharts JS'
  },
  xAxis:[{
        //type: 'time',
        /* labels: {
        formatter: function() {
          return Highcharts.dateFormat('%b/%e/%Y', this.value);
        }
      },*/
       type: 'datetime',
       time:{
         useUTC:false
       },
      
    
    labels: {
        formatter: function() {
          return Highcharts.dateFormat('%e/%m/%Y<br>%H:%M:%S', this.value);
        }
      },
      /*
      labels: {
          //format: '{value:%Y-%b-%e %H:%M}'
          formatter:()=>{
            
            return this.a1
          }
      },*/
       /* time: {
          displayFormats: {
             'millisecond': 'MMM DD',
            'second': 'MMM DD',
            'minute': 'MMM DD',
            'hour': 'MMM DD',
            'day': 'MMM DD',
            'week': 'MMM DD',
            'month': 'MMM DD',
            'quarter': 'MMM DD',
            'year': 'MMM DD',
          }
        },*/
    title: {
      text: 'Date'
    }
  }],
  yAxis: {
    title: {
      text: 'Weight (kg)'
    },
    min: 0
  },
  tooltip: {
    //headerFormat: '<b>{series.name}</b><br>',
    pointFormat: '{point.x:%e. %b.%Y}: {point.y:.2f} kg'
  },

  plotOptions: {
    series: {
      marker: {
        enabled: true
      }
    }
  },

  colors: ['#6CF', '#39F', '#06C', '#036', '#000'],

  // Define the data points. All series have a dummy year
  // of 1970/71 in order to be compared on the same x axis. Note
  // that in JavaScript, months start at 0 for January, 1 for February etc.
  series: [{
    name: "Scale measurements ",
    data:data1
    
    
    
  }],
  responsive: {
    rules: [{
      condition: {
        maxWidth: 500
      },
      chartOptions: {
        plotOptions: {
          series: {
            marker: {
              radius: 2.5
            }
          }
        }
      }
    }]
  }
});



  function append_data(data){
    var table=document.getElementById('list')
    var new_html=`<tr>
      <!--<a href="/device/{{id}}"target="_self" class="a1" > -->
     
      
     <!-- <div class="weight_button" id='button${data.id}' onclick="OpenPopUp(${data.id})">&nbsp;-->
        <td> <p class='weight' > ${data.weight}</p> </td>
         <td><p class="lognitude" >${data.long}</p></td>
         <td><p class="latitude" >${data.lang} </p></td>
        <td> <p class="date-time">${data.date_time}</p></td>
    </tr>`
   
    table.innerHTML=table.innerHTML+new_html

    //for chart
    var d=new Date(data.date_time)
    var new_data=[d.valueOf(),data.weight]
    chart.series[0].addPoint(new_data,false)
    chart.redraw()

    //
    var sum_metr=document.getElementById('metriseis')
    sum_metr.innerText=parseInt(sum_metr.innerText)+1
  }


    var dev_id=document.getElementsByClassName('title')[0].id
    var string2='new_weight'+dev_id
   socket.on(string2,(message)=>{
     
      console.log(message)
      append_data(message)

   })


/*
new Chart("myChart",   {
    type: 'line',
    data: {
    labels: xValues,
    datasets: [{
      fill: false,
      lineTension: 0,
      backgroundColor: "rgba(0,0,255,1.0)",
      borderColor: "rgba(0,0,255,0.1)",
      data: yValues
    }]
  },
   options: {
      d: {display:false},
        scales: {
            x: {
                //type: 'timeseries',
                type: 'time',
                distribution: 'linear',
               time: {
                
                    displayFormats: {
                        quarter: 'YYYY-MM-DD HH-mm-ss'
                       // quarter: 'MMM YYYY'
                    }
                }
            }
        }
    }
});
 */
/*{
  type: "line",
  data: {
    labels: xValues,
    datasets: [{
      fill: false,
      lineTension: 0,
      backgroundColor: "rgba(0,0,255,1.0)",
      borderColor: "rgba(0,0,255,0.1)",
      data: yValues
    }]
  },
  options: {
    legend: {display: false},
    scales: {
      yAxes: [{ticks: {min: 6, max:16}}],
    }
  }
}
);//*/


</script>